plugins {
    id 'com.bertramlabs.asset-pipeline' version '3.0.6'
    id 'java'
    id 'groovy'
    id 'application'
}

group 'xyz.itbang'
version '0.1'

sourceCompatibility = 1.8
mainClassName = "Application"

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
}

dependencies {
    compile project(':gun')
    // compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.codehaus.groovy:groovy-all:2.5.4'
    compile 'io.undertow:undertow-servlet:2.0.13.Final'
    compile 'org.thymeleaf:thymeleaf:3.0.9.RELEASE'

    compile 'com.alibaba:druid:1.1.10'
    compile 'com.zaxxer:HikariCP:3.3.1'
    compile 'org.postgresql:postgresql:42.2.5'

    runtime 'org.slf4j:slf4j-api:1.7.22'
    runtime 'ch.qos.logback:logback-classic:1.2.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        groovy {
            srcDir "gun-app/domains"
            srcDir "gun-app/controllers"
            srcDir "gun-app/views"
            srcDir "gun-app/scripts"
            srcDir "gun-app/init"
        }
        resources {
            srcDir "gun-app/conf"
        }
    }
}


//相当于 gun 命令，接收命令并执行
task gun(type: JavaExec) {
    group 'gun'
    setStandardInput(System.in)
    jvmArgs('-Dfile.encoding=UTF-8')
    classpath = sourceSets.main.runtimeClasspath
    main = 'gun.app.GunMain'
}

//启动服务
task runApp(type: JavaExec) {
    group 'gun'
    // jvmArgs('-Dfile.encoding=UTF-8')
    classpath = sourceSets.main.runtimeClasspath
    main = 'gun.app.GunMain'
    args 'run'
    // println("命令："+commandLine.join(' '))
}

// 运行 gun 命令之前的准备，主要是编译和处理依赖
task prepare(type: Copy) {
    dependsOn classes, assetCompile
    group 'gun'
    into "$buildDir/gun"
    from sourceSets.main.runtimeClasspath
}

task copyLibs(type: Copy) {
    group 'gun'
    from '/Users/yan/projects/gun-dev/gun/build/libs/'
    into "libs"
}

assets {
    assetsPath = "gun-app/assets"
    // includes = []
    // excludes = ['**/*.less'] //Example Exclude GLOB pattern
    // from '/vendor/lib'
}
